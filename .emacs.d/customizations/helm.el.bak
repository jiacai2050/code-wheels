
(defun my/helm-hide-minibuffer-maybe ()
  "Hide minibuffer contents in a Helm session.
   https://github.com/emacs-helm/helm/blob/353c84076d5489b6a4085537775992226f9d5156/helm.el#L4942"
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (helm-aif (and helm-display-header-line
                     (helm-attr 'persistent-help))
          (progn
            (overlay-put ov 'display
                         (truncate-string-to-width
                          (substitute-command-keys
                           (concat "\\<helm-map>\\[helm-execute-persistent-action]: "
                                   (format "%s (keeping session)" it)))
                          (- (window-width) 1)))
            (overlay-put ov 'face 'helm-header))
        (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                `(:background ,bg-color :foreground ,bg-color))))

      (setq cursor-type nil))))

(use-package helm
  ;; :init
  ;; (global-set-key (kbd "C-c h") 'helm-command-prefix)
  ;; (global-unset-key (kbd "C-x c"))
  :pin melpa-stable
  :config
  (helm-mode 1)
  (helm-autoresize-mode 1)

  (setq helm-split-window-in-side-p t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t
        helm-M-x-fuzzy-match t
        helm-etags-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match    t
        ;; https://github.com/emacs-helm/helm/issues/1676
        helm-move-to-line-cycle-in-source nil
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-autoresize-max-height 0
        helm-autoresize-min-height 40
        )

  
  (add-hook 'helm-minibuffer-set-up-hook 'my/helm-hide-minibuffer-maybe)
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x i" . helm-imenu)
         ("C-x f" . helm-recentf)
         ("C-x b" . helm-buffers-list)
         ("C-x w" . helm-toggle-resplit-and-swap-windows)
         ;; ("C-SPC" . helm-dabbrev)
         ;; ("M-y" . helm-show-kill-ring)
         ))


(use-package helm-ls-git
  :after helm
  :ensure t
  :bind (("C-x C-d" . 'helm-browse-project)))

(use-package helm-descbinds
  :after helm
  :config (helm-descbinds-mode))


(use-package helm-projectile
  :after (projectile helm)
  ;; :bind ("C-c f" . helm-projectile-find-file)
  :config
  (helm-projectile-on)
  (setq projectile-switch-project-action 'helm-projectile-find-file))

;; https://github.com/senny/emacs.d/blob/83567797b14e483ae043b7fe57b3154ae9972b4c/init.el#L107
(use-package helm-ag
  :after helm-projectile
  ;; :bind ("C-c g g" . helm-projectile-ag)
  )

(use-package helm-gtags
  :config
  (setq helm-gtags-ignore-case t
        helm-gtags-auto-update t
        helm-gtags-use-input-at-cursor t
        helm-gtags-pulse-at-cursor t
        helm-gtags-prefix-key "\C-cg"
        helm-gtags-suggested-key-mapping t)
  :bind (:map helm-gtags-mode-map
              ("C-c g a" . helm-gtags-tags-in-this-function)
              ("C-j" . helm-gtags-select)
              ("M-." . helm-gtags-dwim)
              ("M-," . helm-gtags-pop-stack)
              ("C-c <" . helm-gtags-previous-history)
              ("C-c >" . helm-gtags-next-history))
  :hook ((dired-mode eshell-mode c-mode c++-mode asm-mode) . helm-gtags-mode))
