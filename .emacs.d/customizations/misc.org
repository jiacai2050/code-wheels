* Set lexical binding
- https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html#Using-Lexical-Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
* Calendar
#+begin_src emacs-lisp
(use-package cal-china
  :ensure nil
  :custom (;; (calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
           ;; (calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
           (calendar-mark-holidays-flag t))
  :config
  (evil-make-overriding-map calendar-mode-map 'motion)
  :bind (:map calendar-mode-map
              ("h" . calendar-backward-day)
              ("l" . calendar-forward-day)
              ("k" . calendar-backward-week)
              ("j" . calendar-forward-week)))

(use-package cal-china-x
  :config
  (setq cal-china-x-important-holidays '((holiday-lunar 2 19 "家财生日")
                                         (holiday-lunar 5 1 "家钰生日")
                                         (holiday-lunar 6 29 "家辉生日")
                                         (holiday-lunar 11 13 "万燕生日"))
        cal-china-x-general-holidays (append cal-china-x-chinese-holidays
                                             '((holiday-lunar 1 15 "元宵节")))

        calendar-holidays (append holiday-general-holidays holiday-local-holidays
                                  holiday-other-holidays holiday-christian-holidays
                                  holiday-solar-holidays
                                  cal-china-x-important-holidays cal-china-x-general-holidays)))

(use-package calfw
  :commands cfw:open-calendar-buffer)
#+end_src
* Others
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :load-path "~/.emacs.d/vendor/restclient"
  :mode ("\\.api\\'" . restclient-mode))

(use-package protobuf-mode
  :load-path "~/.emacs.d/vendor/protobuf-mode"
  :mode ("\\.proto\\'" . protobuf-mode))

;; https://github.com/justbur/emacs-which-key
(use-package which-key
  :config (which-key-mode))

(use-package chronos
  :config
  (defun my/chronos-shell-notify (c)
    "Notify expiration of timer C by running a shell command.
https://gist.github.com/bravosierrasierra/59d6d0c1ddff46a1b87b18738cecf8a2"
    (if (eq system-type 'darwin)
        (chronos--shell-command "Chronos shell notification for Mac OS X"
                                "terminal-notifier"
                                (list "-sound" "default" "-title" "TIME OVER" "-message" (chronos--message c))
                                )
      (chronos--shell-command "Chronos shell notification for Linux & Windows"
                              "notify-send"
                              (list "-t" "3600000" "TIME OVER" (chronos--message c))))
    ;; 24*60*60*1000 = 86400000  60*60*1000 = 3600000
    )
  (defun my/stop-expired-timer (c)
    (chronos--pause c))

  (setq chronos-expiry-functions '(chronos-buffer-notify
                                   my/chronos-shell-notify
                                   chronos-message-notify
                                   my/stop-expired-timer)))

(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))

(use-package easy-hugo
  :commands (easy-hugo-with-env)
  :init
  (defun my/hugo-newpost (slug title tags categories)
    (interactive "sSlug: \nsTitle: \nsTags: \nsCategories: ")
    (easy-hugo-with-env
     (let* ((now (current-time))
		    (basename (concat (format-time-string "%Y-%m-%d-" now)
							  slug easy-hugo-default-ext))
		    (postdir (expand-file-name easy-hugo-postdir easy-hugo-basedir))
		    (filename (expand-file-name basename postdir)))
	   (when (file-exists-p filename)
         (error "%s already exists!" filename))
	   (find-file filename)
	   (insert
	    (format "#+TITLE: %s\n#+DATE: %s\n#+TAGS[]: %s\n#+CATEGORIES[]: %s\n"
                title (my/iso-8601-date-string) tags categories))
	   (goto-char (point-max))
	   (save-buffer))))
  :bind (:map easy-hugo-mode-map
         ("w" . my/hugo-newpost))
  :custom ((easy-hugo-basedir  "~/gh/jiacai2050.github.io/")
		   (easy-hugo-url  "https://liujiacai.net")
           (easy-hugo-default-ext ".org")
           (easy-hugo-bloglist '(((easy-hugo-basedir . "~/gh/en-blog/")
                                  (easy-hugo-default-ext ".org")
		                          (easy-hugo-url . "https://en.liujiacai.net"))))))

(defun my/google-search ()
  "Googles a query or region if any."
  (interactive)
  (ivy-read "Google: " nil
            :action (lambda (q)
                      (browse-url
                       (concat
                        "http://www.google.com/search?ie=utf-8&oe=utf-8&q=" q)))))


(defalias '-> 'thread-first)
(defalias '->> 'thread-last)
#+END_SRC
