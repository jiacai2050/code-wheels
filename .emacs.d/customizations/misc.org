* Languages
** Ocaml
- https://github.com/ocaml/merlin/wiki/emacs-from-scratch
#+BEGIN_SRC shell
opam install tuareg merlin utop
#+END_SRC
#+BEGIN_SRC emacs-lisp
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (load "tuareg-site-file")
    ;; (load "merlin")
    (autoload 'merlin-mode "merlin" nil t nil)
    (autoload 'utop "utop" "Toplevel for OCaml" t)
    (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (setq tuareg-indent-align-with-first-arg t)
    (setq tuareg-match-patterns-aligned t)

    (add-hook 'caml-mode-hook 'merlin-mode t)
    (setq utop-command "opam config exec -- utop -emacs")
    ;; utop-minor cause merlin docstr didn't showup
    ;; (add-hook 'tuareg-mode-hook 'utop-minor-mode)
    ))
#+END_SRC

* Gpg
- https://emacs.stackexchange.com/a/32554/16450
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
  ;; (setq epa-file-encrypt-to "hello@liujiacai.net")
#+END_SRC
* Submodule
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :load-path "~/.emacs.d/vendor/restclient"
  :mode ("\\.api\\'" . restclient-mode))

(use-package protobuf-mode
  :load-path "~/.emacs.d/vendor/protobuf-mode"
  :mode ("\\.proto\\'" . protobuf-mode))

(use-package vmd-mode
  :load-path  "~/.emacs.d/vendor/vmd-mode"
  :ensure-system-package (vmd . "npm install -g vmd"))
#+END_SRC
* Git
- https://magit.vc/manual/magit/Getting-started.html#Getting-started
#+begin_src emacs-lisp
;; magit dependencies
(use-package magit-popup)
(use-package with-editor)
(use-package dash)
(use-package transient)
(use-package ghub)

(use-package magit
  :load-path "~/.emacs.d/vendor/magit/lisp"
  :after (with-editor transient dash magit-popup ghub)
  :bind (("C-x g" . magit-status)
         ("C-c g b" . magit-blame-addition))
  ;; :config (setq magit-completing-read-function 'magit-ido-completing-read)
)

(use-package git-link
  :bind (("C-c g l" . git-link)
         ("C-c g c" . my/git-link-commit)
         ("C-c g h" . git-link-homepage))
  :config
  (progn
    (defun my/git-link-commit (remote start end)
      (interactive (let* ((remote (git-link--select-remote))
                          (region (when (or buffer-file-name (git-link--using-magit-blob-mode))
                                    (git-link--get-region))))
                     (list remote (car region) (cadr region))))
      (setq git-link-use-commit t)
      (git-link remote start end)
      (setq git-link-use-commit nil))
    (setq git-link-open-in-browser t)
    (add-to-list 'git-link-remote-alist
                 '("gitee\\.com" git-link-github))
    (add-to-list 'git-link-commit-remote-alist
                 '("gitee\\.com" git-link-commit-github))
    (add-to-list 'git-link-remote-alist
                 '("alipay\\(-inc\\)?\\.com" git-link-github))
    (add-to-list 'git-link-commit-remote-alist
                 '("alipay\\(-inc\\)?\\.com" git-link-commit-github))))

(use-package git-timemachine
  :bind (("C-c g t" . git-timemachine-toggle)))

;; (use-package magithub
;;   :after magit
;;   :config
;;   (magithub-feature-autoinject t)
;;   (setq magithub-clone-default-directory "~/codes/git"))


#+end_src
* Others
#+BEGIN_SRC emacs-lisp
;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)
(setq url-configuration-directory (locate-user-emacs-file "data/url/"))

(setq datetime-timezone "Asia/Shanghai")

(global-set-key (kbd "C-u") 'scroll-down-command)
(global-set-key (kbd "C-i") 'scroll-up-command)
;; emacs-plus 26.3 bind tab to scroll-up-command, hack it back
(global-set-key (kbd "TAB") 'indent-for-tab-command)

;; shell scripts
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)

;; No need for ~ files when editing
(setq create-lockfiles nil)

;; Go straight to scratch buffer on startup
(setq inhibit-startup-message t)

;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Safe-File-Variables.html
(setq enable-local-variables :safe)

;; https://github.com/justbur/emacs-which-key
(use-package which-key
  :config (which-key-mode))

(use-package chronos
  :config
  (defun my/chronos-shell-notify (c)
    "Notify expiration of timer C by running a shell command.
https://gist.github.com/bravosierrasierra/59d6d0c1ddff46a1b87b18738cecf8a2"
    (if (eq system-type 'darwin)
        (chronos--shell-command "Chronos shell notification for Mac OS X"
                                "terminal-notifier"
                                (list "-sound" "default" "-title" "TIME OVER" "-message" (chronos--message c))
                                )
      (chronos--shell-command "Chronos shell notification for Linux & Windows"
                              "notify-send"
                              (list "-t" "3600000" "TIME OVER" (chronos--message c))))
    ;; 24*60*60*1000 = 86400000  60*60*1000 = 3600000
    )
  (defun my/stop-expired-timer (c)
    (chronos--pause c))

  (setq chronos-expiry-functions '(chronos-buffer-notify
                                   my/chronos-shell-notify
                                   chronos-message-notify
                                   my/stop-expired-timer)))

#+END_SRC
